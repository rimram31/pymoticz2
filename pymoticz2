#!/usr/bin/env python
"""Usage:
    pymoticz2 list [--host=<host>] [--names] [--idxs]
    pymoticz2 test
    pymoticz2 status <id> [--host=<host>]
    pymoticz2 on <id> [--host=<host>]
    pymoticz2 off <id> [--host=<host>]
    pymoticz2 dim <id> <level> [--host=<host>]
"""
import requests
import json

__all__ = [ 'Pymoticz2' ]
__version__ = '0.2'

class Pymoticz2:
    DIMMER = u'Dimmer'
    ON_OFF = u'On/Off'
    SWITCH_TYPES=[ DIMMER, ON_OFF ]
    def __init__(self, domoticz_host='127.0.0.1:8080'):
        self.host = domoticz_host
        self.api = 'http://%s/json.htm' % self.host

    def _api(self, params):
        r=requests.get(self.api,params)
        if r.status_code == 200:
            return json.loads(r.text)
        else:
            raise

    def list_names(self):
        l=self.list()
        return [device['Name'] for device in l['result']]

    def list_idxs(self):
        l=self.list()
        return [(device['Name'], device['idx']) for device in l['result']]

    def list(self):
        return self._api({'type':'devices', 'used':'true'})

    def turn_on(self, _id):
        return self._api({'type':'command', 'param':'switchlight', 'idx': _id, 'switchcmd':'On'})

    def turn_off(self, _id):
        return self._api({'type':'command', 'param':'switchlight', 'idx': _id, 'switchcmd':'Off', 'level':0})

    def dim(self, _id, level):
        d=self.get_device(_id)
        if d is None:
            return 'No device with that id.'

        max_dim=d['MaxDimLevel']
        if int(level) > max_dim or int(level) < 0:
            return 'Level has to be in the range 0 to %d' % max_dim
        return self._api({'type':'command', 'param':'switchlight', 'idx': _id, 'switchcmd':'Set Level', 'level':level})

    def get_device(self, _id):
        l=self.list()
        try:
            device=[i for i in l['result'] if i['idx'] == u'%s' % _id][0]
        except:
            return None
        return device

    def get_light_status(self, _id):
        light = self.get_device(_id)
        if light is None:
            return 'No device with that id.'
        if light['SwitchType'] not in self.SWITCH_TYPES:
            return 'Not a light switch'
        elif light['SwitchType'] == self.DIMMER:
            return light['Level']
        elif light['SwitchType'] == self.ON_OFF:
            return light['Status']

    def get_deviceId_byname(self, name):
        l=self.list()
        return [device['idx'] for device in l['result'] if device['Name'] == name][0]

    def get_id(self, _id):
        id = None
        try:
            id = int(_id)
        except:
            try: id = self.get_deviceId_byname(_id)
            except: pass
        return id

if __name__ == '__main__':
    from docopt import docopt
    from pprint import pprint
    args=docopt(__doc__, version=__version__)

    p=None
    if args['--host']:
        p=Pymoticz2(args['--host'])
    else:
        p=Pymoticz2()

    if args['list']:
        if args['--names']:
            print('\n'.join(p.list_names()))
        elif args['--idxs']:
            print(p.list_idxs())
        else:
            pprint(p.list())
    elif args['status']:
        response = p.get_light_status(p.get_id(args['<id>']))
        print(response)
    elif args['on']:
        response = p.turn_on(p.get_id(args['<id>']))
    elif args['off']:
        response = p.turn_off(p.get_id(args['<id>']))
    elif args['dim']:
        response = p.dim(args['<id>'], args['<level>'])
        print(response)
